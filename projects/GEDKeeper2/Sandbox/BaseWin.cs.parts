
using GKCore.Commands;

		private UndoManager FUndoman;

		public UndoManager Undoman
		{
			get { return this.FUndoman; }
		}

	// dispose
	this.FUndoman.Dispose();

	//ctor
	this.FUndoman = new UndoManager(this.FTree, UndoManager.TUndoManType.manualCommit);

	//clear
	this.FUndoman.Clear();

	//
		public void DoUndo()
		{
			this.FUndoman.CmdUndo();
			this.ListsRefresh(false);
			GKUI.TfmGEDKeeper.Instance.UpdateControls(false);
		}

		public void DoRedo()
		{
			this.FUndoman.CmdRedo();
			this.ListsRefresh(false);
			GKUI.TfmGEDKeeper.Instance.UpdateControls(false);
		}

		public void DoPersonChangeSex(TGEDCOMIndividualRecord person, TGEDCOMSex newSex)
		{
			if (person.Sex != newSex)
			{
				this.FUndoman.CmdDo(new TCmdPersonChangeSex(this.FUndoman, person, newSex));
				this.FUndoman.Commit();
			}
		}

		public void DoPersonChangePatriarch(TGEDCOMIndividualRecord person, bool newValue)
		{
			if (person.Patriarch != newValue)
			{
				this.FUndoman.CmdDo(new TCmdPersonChangePatriarch(this.FUndoman, person, newValue));
				this.FUndoman.Commit();
			}
		}

		public void DoPersonChangeBookmark(TGEDCOMIndividualRecord person, bool newValue)
		{
			if (person.Bookmark != newValue)
			{
				this.FUndoman.CmdDo(new TCmdPersonChangeBookmark(this.FUndoman, person, newValue));
				this.FUndoman.Commit();
			}
		}

